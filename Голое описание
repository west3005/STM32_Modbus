–ü–æ—Å–∫–æ–ª—å–∫—É –Ω–∞—à —Å–∞–π—Ç, –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, —Å–æ–∑–¥–∞–≤–∞–ª—Å—è –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –ª—é–¥–µ–π, —Ç–æ –∫–æ–≥–¥–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∫–∞–∫–æ–π-—Ç–æ –∑–∞–ø—Ä–æ—Å, —è —Å—Ç–∞—Ä–∞—é—Å—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É üëç –¢–∞–∫ –≤–æ—Ç, –≤ —Å—Ç–∞—Ç—å–µ –ø—Ä–æ –ø—Ä–æ—Ç–æ–∫–æ–ª Modbus –≤–æ–∑–Ω–∏–∫–ª–æ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ STM32, —Ç–∞–∫ —á—Ç–æ –∏–º–µ–Ω–Ω–æ —ç—Ç–∏–º —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–π–º–µ–º—Å—è. –ê —Ç–æ—á–Ω–µ–µ - –æ—Å—É—â–µ—Å—Ç–≤–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è Modbus RTU Slave. –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º!

–í–æ–ø—Ä–µ–∫–∏ —É—Å—Ç–æ—è–≤—à–µ–π—Å—è –ø—Ä–∞–∫—Ç–∏–∫–µ, —è –Ω–µ –±—É–¥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É. –° –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –∑–∞—á–∞—Å—Ç—É—é —ç—Ç–æ –æ–ø—Ä–∞–≤–¥–∞–Ω–Ω–æ - —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—à—å –∞–ø—Ä–∏–æ—Ä–∏ —É–≤–µ—Ä–µ–Ω –Ω–∞ 100%. –ù–æ, —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –µ—Å–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏–∑–æ–±—Ä–µ—Ç–∞—Ç—å —Ç–æ, —á—Ç–æ —É–∂–µ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–æ, —Ç–æ –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–æ–±—Ä–µ—Å—Ç–∏ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ ) –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç, –ø—Ä–∏—á–µ–º –æ–Ω –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω, —Ç–∞–∫ —á—Ç–æ –Ω–∞ –Ω–µ–º –∏ –∞–∫—Ü–µ–Ω—Ç–∏—Ä—É–µ–º –≤–Ω–∏–º–∞–Ω–∏–µ. –ò –≤–∞—Ä–∏–∞–Ω—Ç —ç—Ç–æ—Ç - –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ FreeModbus, —Å–∫–∞—á–∏–≤–∞–µ–º - —Å—Å—ã–ª–∫–∞.

–ù—é–∞–Ω—Å –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –æ–Ω–∞ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ STM32, —ç—Ç–æ —É–∂–µ –ø—Ä–∏–¥–µ—Ç—Å—è –≤–æ–∑–ª–æ–∂–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Å–µ–±—è. –ó–∞–¥–µ–π—Å—Ç–≤—É–µ–º, –∫–∞–∫ –æ–±—ã—á–Ω–æ, –≤–≤–∏–¥—É –Ω–∞–∏–±–æ–ª—å—à–µ–π –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ STM32CubeIDE, —á—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ STM32CubeMx, –∞ —Ç–∞–∫–∂–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ HAL. –í—Å–µ —ç—Ç–æ –Ω—É–∂–Ω–æ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ —Å–≤—è–∑–∞—Ç—å –≤–æ–µ–¥–∏–Ω–æ.

–ö–∞–∫ —É–∂–µ —Å–∫–∞–∑–∞–ª, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ–µ–∫—Ç, —è –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å STM32F103C8, –æ–ø—è—Ç—å –∂–µ –∏–∑-–∑–∞ –µ–≥–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–æ—Å—Ç–∏. –ò–∑ –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏, –≤–æ-–ø–µ—Ä–≤—ã—Ö, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä - –≤–Ω–µ—à–Ω–∏–π –∫–≤–∞—Ä—Ü, SWD –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:

–ü—Ä–æ–µ–∫—Ç –¥–ª—è Modbus RTU Slave –Ω–∞ STM32.
STM32CubeMx SWD.
STM32CubeMx HSE.
STM32CubeMx RCC.
–î–∞–ª–µ–µ –ø–µ—Ä–∏—Ñ–µ—Ä–∏—è –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É. –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é —è –±—É–¥—É –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å —á–µ—Ä–µ–∑ USART, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, –¥–∞–ª–µ–µ —É–∂–µ —Å–∏–≥–Ω–∞–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ RS-485. –ü–æ—ç—Ç–æ–º—É –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º USART1 –∏ –ø–æ–º–∏–º–æ –ø—Ä–æ—á–µ–≥–æ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –∏–∑ —Ç–∞–π–º–µ—Ä–æ–≤, –ø—É—Å—Ç—å –±—É–¥–µ—Ç TIM3.

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ USART —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ:

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ USART.
–¢–∞–π–º–µ—Ä –∂–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 50 –º–∫—Å:

–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–∞.
–ò –Ω–µ —É–ø—É—Å–∫–∞–µ–º –∏–∑ –≤–∏–¥—É –≤–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –∫–∞–∫ –¥–ª—è USART1, —Ç–∞–∫ –∏ –¥–ª—è TIM3:

–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏—è USART.
–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞.
–ù–∞ —ç—Ç–æ–º –≤—Å–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç –∏ —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –º–æ–¥—É–ª–µ–π, –≤ –∫–æ—Ç–æ—Ä—É—é –∏ –ø–æ–º–µ—â–∞–µ–º –ø–∞–ø–∫—É modbus –∏–∑ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞, –∞ –≤ –Ω–µ–µ –∫–ª–∞–¥–µ–º –ø–æ–¥–ø–∞–ø–∫—É port, –∏—Å—Ö–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π - freemodbus-v1.6\demo\BARE\port.

–ù–µ–±–æ–ª—å—à–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π. –î–æ–±–∞–≤–ª—è–µ–º—ã–µ –ø–∞–ø–∫–∏ —Å –∫–æ–¥–æ–º –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å "Source Folder", –∞ –Ω–µ "Folder":

STM32CubeIDE Source Folder.
–ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã "–æ–±—ã—á–Ω—ã–µ" –ø–∞–ø–∫–∏, —Ç–æ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ ‚áí New ‚áí Source Folder ‚áí –°–ø—Ä–∞–≤–∞ –æ—Ç —Å—Ç—Ä–æ–∫–∏ "Folder Name" –∫–Ω–æ–ø–∫–∞ "Browse" ‚áí –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é –ø–∞–ø–∫—É ‚áí –û–Ω–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è "Source Folder". –≠—Ç–æ –≤–∏–¥–Ω–æ –ø–æ —Å–∏–Ω–µ–º—É –º–∏–Ω–∏-–∑–Ω–∞—á–∫—É —Å –±—É–∫–≤–æ–π "C":

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ Modbus RTU Slave.
–ò–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å –∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥ —Ç—É –∏–ª–∏ –∏–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É:

port.h
portevent.c
portserial.c
porttimer.c
–ö—Ä–æ–º–µ —Ç–æ–≥–æ, —è –¥–æ–±–∞–≤–∏–ª –ø–∞—Ä—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ - mt_port.c / mt_port.h. –î–∞, –∏ –Ω–µ —É–ø—É—Å–∫–∞–µ–º –∏–∑ –≤–∏–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π –∫–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞:

Include Paths STM32CubeIDE.
–ü–æ–π–¥–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É, –ø–æ—á–µ–º—É –Ω–µ—Ç. –í port.h –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π. –ü—Ä–∞–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:

extern void EnterCriticalSection();
extern void ExitCriticalSection();
#define ENTER_CRITICAL_SECTION()         EnterCriticalSection()
#define EXIT_CRITICAL_SECTION()          ExitCriticalSection()
–§—É–Ω–∫—Ü–∏–∏ EnterCriticalSection() –∏ ExitCriticalSection(), –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, —Å–æ–∑–¥–∞–Ω—ã –≤ mt_port.c. –ò —Ä–∞–∑ —É–∂ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞, —Ç–æ —Ç–∞–º —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–æ–¥—É–ª–∏ USART –∏ Timer, –∞ —Ç–∞–∫–∂–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è. –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏–ª–∞—Å—å –≤ –æ–¥–Ω–æ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º –º–µ—Å—Ç–µ, –∫—É–¥–∞ –∏ –±—É–¥—É—Ç –≤–Ω–æ—Å–∏—Ç—å—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π:

/**
  ******************************************************************************
  * @file           : mt_port.c
  * @brief          : Additional porting data
  * @author         : MicroTechnics (microtechnics.ru)
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "mt_port.h"
/* Declarations and definitions ----------------------------------------------*/
static uint32_t lockCounter = 0;
UART_HandleTypeDef* modbusUart;
TIM_HandleTypeDef* modbusTimer;
/* Functions -----------------------------------------------------------------*/
/*----------------------------------------------------------------------------*/
void EnterCriticalSection()
{
  __disable_irq();
  lockCounter++;
}
/*----------------------------------------------------------------------------*/
void ExitCriticalSection()
{
  lockCounter--;
  if (lockCounter == 0)
  {
    __enable_irq();
  }
}
/*----------------------------------------------------------------------------*/\
void MT_PORT_SetTimerModule(TIM_HandleTypeDef* timer)
{
  modbusTimer = timer;
}
/*----------------------------------------------------------------------------*/\
void MT_PORT_SetUartModule(UART_HandleTypeDef* uart)
{
  modbusUart = uart;
}
/*----------------------------------------------------------------------------*/
–í—Å–µ, –Ω–∞ —ç—Ç–æ–º –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å:

port.h
mt_port.c
mt_port.h
–ü–æ–ª–Ω—ã–π –∫–æ–¥ –∏ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∫–∞–∫ –∏ –≤—Å–µ–≥–¥–∞ –±—É–¥—É—Ç –≤ –∫–æ–Ω—Ü–µ —Å—Ç–∞—Ç—å–∏. –î–∞–ª—å—à–µ —É –Ω–∞—Å:

portevent.c
portserial.c
porttimer.c
–ü–µ—Ä–≤—ã–π –∏–∑ –Ω–∏—Ö –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –¢–∞–∫ —á—Ç–æ —Å—Ä–∞–∑—É –∫–æ –≤—Ç–æ—Ä–æ–º—É –ø—É–Ω–∫—Ç—É. –î–æ–±–∞–≤–ª—è–µ–º –≤ portserial.c –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:

/* ----------------------- Variables ----------------------------------------*/
extern UART_HandleTypeDef* modbusUart;
uint8_t txByte = 0x00;
uint8_t rxByte = 0x00;
–ò –¥–∞–ª–µ–µ –ø—Ä—è–º–æ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º. vMBPortSerialEnable() –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫–∞/–ø—Ä–∏–µ–º–Ω–∏–∫–∞. –¢—Ä–µ–±—É–µ–º—ã–µ —Ä–µ–∂–∏–º—ã –∑–∞–¥–∞—é—Ç—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ xRxEnable –∏ xTxEnable. –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º HAL, —Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, —á—Ç–æ–±—ã –ø—Ä–∏ —ç—Ç–æ–º –≤—Å–µ –±—ã–ª–æ –ª–æ–≥–∏—á–Ω–æ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –æ–±–æ–π–¥–µ–º—Å—è –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–≥—Ä–æ–º–Ω—ã—Ö –∫—É—Å–∫–æ–≤ HAL –≤ portserial.c. –ò—Ç–æ–≥–æ –∏–º–µ–µ–º:

/* ----------------------- Start implementation -----------------------------*/
/*----------------------------------------------------------------------------*/
void vMBPortSerialEnable(BOOL xRxEnable, BOOL xTxEnable)
{
  if (xRxEnable == FALSE)
  {
    HAL_UART_AbortReceive_IT(modbusUart);
  }
  else
  {
    HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
  }
  if (xTxEnable == FALSE)
  {
    HAL_UART_AbortTransmit_IT(modbusUart);
  }
  else
  {
    if (modbusUart->gState == HAL_UART_STATE_READY)
    {
      prvvUARTTxReadyISR();
    }
  }
}
/* --------------------------------------------------------------------------*/
–ó–¥–µ—Å—å –≤—Å–µ, –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ, –ø–æ–Ω—è—Ç–Ω–æ, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Ä–∞–∑–≤–µ —á—Ç–æ –≤—ã–∑–æ–≤–∞ prvvUARTTxReadyISR(). –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∞–µ—Ç FreeModbus –∑–Ω–∞—Ç—å, —á—Ç–æ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫ —Å–≤–æ–±–æ–¥–µ–Ω, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –ø—Ä–∏ –µ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏–∏ –æ–Ω —Å–∞–º–æ —Å–æ–±–æ–π –≥–æ—Ç–æ–≤ –∫ –Ω–∞—á–∞–ª—É –ø–µ—Ä–µ–¥–∞—á–∏.

–¢–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏ xMBPortSerialInit() –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—É—Å—Ç—ã–º, –ø–æ—Å–∫–æ–ª—å–∫—É –∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–µ—Ä–∏—Ñ–µ—Ä–∏–∏ –æ—Ç–≤–µ—á–∞–µ—Ç STM32CubeMx, –∞ —Ä–∞–∑ –º—ã –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º, —Ç–æ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É —Ä–∞–±–æ—Ç—É –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ:

/* --------------------------------------------------------------------------*/
BOOL xMBPortSerialInit(UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity)
{
    return TRUE;
}
/* --------------------------------------------------------------------------*/
–§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–π—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:

/* --------------------------------------------------------------------------*/
BOOL xMBPortSerialPutByte(CHAR ucByte)
{
  txByte = ucByte;
  HAL_UART_Transmit_IT(modbusUart, &txByte, 1);
  return TRUE;
}
/* --------------------------------------------------------------------------*/
BOOL xMBPortSerialGetByte(CHAR * pucByte)
{
  *pucByte = rxByte;
  HAL_UART_Receive_IT(modbusUart, &rxByte, 1);
  return TRUE;
}
/* --------------------------------------------------------------------------*/
–û—Å—Ç–∞–µ—Ç—Å—è —á–∞—Å—Ç—å, –∑–∞–≤—è–∑–∞–Ω–Ω–∞—è –Ω–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è:

/* --------------------------------------------------------------------------*/
static void prvvUARTTxReadyISR(void)
{
  pxMBFrameCBTransmitterEmpty();
}
/* --------------------------------------------------------------------------*/
static void prvvUARTRxISR(void)
{
  pxMBFrameCBByteReceived();
}
/* --------------------------------------------------------------------------*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == modbusUart->Instance)
  {
    prvvUARTTxReadyISR();
  }
}
/* --------------------------------------------------------------------------*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == modbusUart->Instance)
  {
    prvvUARTRxISR();
  }
}
/* --------------------------------------------------------------------------*/
–ü–æ –ø—Ä–∏–µ–º—É:

–ü–æ–ø–∞–¥–∞–µ–º –≤ callback HAL_UART_RxCpltCallback()
–û—Ç—Ç—É–¥–∞ –≤ prvvUARTRxISR()
–ò–∑ –Ω–µ–µ –≤—ã–∑—ã–≤–∞–µ–º pxMBFrameCBByteReceived()
–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –ø–µ—Ä–µ–¥–∞—á–∏ –≤—Å–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ:

HAL_UART_TxCpltCallback()
prvvUARTTxReadyISR()
pxMBFrameCBTransmitterEmpty()
–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ UART - RS-485 –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∑–∞–±—ã–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Ä–µ–∂–∏–º –µ–≥–æ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–µ–º–Ω–∏–∫–∞ –Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫ –∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.

–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, —Å —ç—Ç–∏–º –ø–æ–∫–æ–Ω—á–µ–Ω–æ, –Ω–∞ –æ—á–µ—Ä–µ–¥–∏ —Ç–∞–π–º–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å - porttimer.c. –î–µ–π—Å—Ç–≤—É–µ–º –ø–æ —Ç–æ–π –∂–µ —Å—Ö–µ–º–µ, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:

/* ----------------------- Variables ----------------------------------------*/
extern TIM_HandleTypeDef* modbusTimer;
uint16_t timerPeriod = 0;
uint16_t timerCounter = 0;
–ò –ø–æ—à–ª–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –ø–æ –ø–æ—Ä—è–¥–∫—É –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–∫–∂–µ –Ω–∞ –æ—Ç–∫—É–ø CubeMx:

/* ----------------------- Start implementation -----------------------------*/
/*----------------------------------------------------------------------------*/
BOOL xMBPortTimersInit(USHORT usTim1Timerout50us)
{
  timerPeriod = usTim1Timerout50us;
  return TRUE;
}
/* --------------------------------------------------------------------------*/
–ê—Ä–≥—É–º–µ–Ω—Ç–æ–º –∑–∞–¥–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥ –≤ –æ—Ç—Å—á–µ—Ç–∞—Ö —Ç–∞–π–º–µ—Ä–∞, –∞ —ç—Ç–æ—Ç –æ—Ç—Å—á–µ—Ç - 50 –º–∫—Å. –ó–∞–ø—É—Å–∫ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç—ã –¥–æ –Ω–µ–ø—Ä–∏–ª–∏—á–∏—è:

/* --------------------------------------------------------------------------*/
inline void vMBPortTimersEnable()
{
  timerCounter = 0;
  HAL_TIM_Base_Start_IT(modbusTimer);
}
/* --------------------------------------------------------------------------*/
inline void vMBPortTimersDisable()
{
  HAL_TIM_Base_Stop_IT(modbusTimer);
}
/* --------------------------------------------------------------------------*/
–ò –Ω–∞ —Ñ–∏–Ω–∏—à–µ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø–æ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—é:

/* --------------------------------------------------------------------------*/
static void prvvTIMERExpiredISR(void)
{
    (void)pxMBPortCBTimerExpired();
}
/* --------------------------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Instance == modbusTimer->Instance)
  {
    timerCounter++;
    if (timerCounter == timerPeriod)
    {
      prvvTIMERExpiredISR();
    }
  }
}
/* --------------------------------------------------------------------------*/
–í—Å–µ, –ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –¢–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º Modbus RTU, —Ç–æ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º. –í mbconfig.h –≤ –ø–∞–ø–∫–µ include:

/*! \brief If Modbus ASCII support is enabled. */
#define MB_ASCII_ENABLED                        (0)
/*! \brief If Modbus RTU support is enabled. */
#define MB_RTU_ENABLED                          (1)
/*! \brief If Modbus TCP support is enabled. */
#define MB_TCP_ENABLED                          (0)
–í—ã—Ö–æ–¥–∏–º –Ω–∞ —Ñ–∏–Ω–∏—à–Ω—É—é, –≤—Å–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ main.c. –í–æ—Å—Å–æ–∑–¥–∞–¥–∏–º –¥–µ–º–æ-–ø—Ä–∏–º–µ—Ä –¥–ª—è Modbus RTU Slave, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –≤ —Å–æ—Å—Ç–∞–≤–µ FreeModbus. –ó–∞–∫–ª—é—á–∞–µ—Ç—Å—è –æ–Ω –≤ —Ç–æ–º, —á—Ç–æ Slave –∂–¥–µ—Ç –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç Master'—É. –û–±—ä—è–≤–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å —ç—Ç–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:

/* USER CODE BEGIN PD */
#define REG_INPUT_START 1000
#define REG_INPUT_NREGS 8
/* USER CODE END PD */
–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–¥–∞–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –¥–∞–Ω–Ω—ã–µ —ç—Ç–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤:

/* USER CODE BEGIN PV */
static USHORT usRegInputStart = REG_INPUT_START;
static USHORT usRegInputBuf[REG_INPUT_NREGS] = {'M', 'o', 'd', 'b', 'u', 's', 0, 0};
/* USER CODE END PV */
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–∞, —Ä–∞–¥–∏ —ç—Ç–æ–≥–æ –º—ã –∏ —Å–¥–µ–ª–∞–ª–∏ –≤—Å–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ:

/* USER CODE BEGIN 2 */
MT_PORT_SetTimerModule(&htim3);
MT_PORT_SetUartModule(&huart1);
eMBErrorCode eStatus;
eStatus = eMBInit(MB_RTU, 0x0A, 0, 19200, MB_PAR_NONE);
eStatus = eMBEnable();
if (eStatus != MB_ENOERR)
{
// Error handling
}
/* USER CODE END 2 */
–ó–∞–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏—Ñ–µ—Ä–∏–π–Ω—ã–µ –º–æ–¥—É–ª–∏ –≤ –æ–¥–Ω–æ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º –º–µ—Å—Ç–µ - MT_PORT_SetTimerModule(&htim3) –∏ MT_PORT_SetUartModule(&huart1). –î–∞–ª–µ–µ —É–∂–µ —Å–ª–µ–¥—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏. –ü—Ä–∏ —ç—Ç–æ–º –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º—ã –Ω–µ —Å—Ç–∞–ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–æ–¥–µ –±–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, —Ç–µ–º –Ω–µ –º–µ–Ω–µ–µ –ø–µ—Ä–µ–¥–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ eMBInit(). –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ —ç—Ç–æ –≤—ã—Ç–µ–∫–∞–µ—Ç –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏—Å—Ö–æ–¥—è –∏–∑ —ç—Ç–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤—ã—Å—Ç–∞–≤–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤ —á–∞—Å—Ç–Ω–æ—Å—Ç–∏, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–π–º–∏–Ω–≥–∏. –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–¥–µ—Å—å –∑–Ω–∞—á–µ–Ω–∏–µ 0x0A - —ç—Ç–æ –∞–¥—Ä–µ—Å Slave, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∑–∞–¥–∞–µ–º.

–í while(1) –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ:

/* Infinite loop */
/* USER CODE BEGIN WHILE */
while (1)
{
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    eMBPoll();
    usRegInputBuf[REG_INPUT_NREGS - 2] =  HAL_GetTick() / 1000;
    usRegInputBuf[REG_INPUT_NREGS - 1] =  HAL_GetTick();
}
/* USER CODE END 3 */
–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ, –¥–µ—Ä–≥–∞–µ–º FreeModbus - eMBPoll(), –∞ —Ç–∞–∫–∂–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∑–∞–Ω–æ—Å–∏–º –≤—Ä–µ–º—è, –ø—Ä–æ—à–µ–¥—à–µ–µ —Å –º–æ–º–µ–Ω—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è - –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö.

–û—Å—Ç–∞–ª–æ—Å—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å callback'–∏:

eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs)
eMBErrorCode eMBRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)
eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode)
eMBErrorCode eMBRegDiscreteCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete)
–û–Ω–∏ –±—É–¥—É—Ç –≤—ã–∑–≤–∞–Ω—ã –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –í –¥–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤, –≤—Å–µ –≤ —Ç–æ–º –∂–µ main.c:

/* USER CODE BEGIN 4 */
/*----------------------------------------------------------------------------*/
eMBErrorCode eMBRegInputCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs)
{
  eMBErrorCode eStatus = MB_ENOERR;
  int iRegIndex;
  if ((usAddress >= REG_INPUT_START) &&
      (usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS))
  {
    iRegIndex = (int)(usAddress - usRegInputStart);
    while(usNRegs > 0)
    {
        *pucRegBuffer++ = (unsigned char)(usRegInputBuf[iRegIndex] >> 8);
        *pucRegBuffer++ = (unsigned char)(usRegInputBuf[iRegIndex] & 0xFF);
        iRegIndex++;
        usNRegs--;
    }
  }
  else
  {
    eStatus = MB_ENOREG;
  }
  return eStatus;
}
/*----------------------------------------------------------------------------*/
eMBErrorCode eMBRegHoldingCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
                             eMBRegisterMode eMode)
{
  return MB_ENOREG;
}
/*----------------------------------------------------------------------------*/
eMBErrorCode eMBRegCoilsCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
                           eMBRegisterMode eMode)
{
  return MB_ENOREG;
}
/*----------------------------------------------------------------------------*/
eMBErrorCode eMBRegDiscreteCB(UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete)
{
  return MB_ENOREG;
}
/*----------------------------------------------------------------------------*/
/* USER CODE END 4 */
–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ç–æ –µ—Å—Ç—å –∞–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ê –¥–∞–ª—å—à–µ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–ª–Ω—è–µ–º –±—É—Ñ–µ—Ä –æ—Ç–≤–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.

–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —ç—Ç–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —É—Ç–∏–ª–∏—Ç—ã - Modbus Poll. –ò–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, —Å–Ω–∞—á–∞–ª–∞ - –º–µ—Ç–æ–¥ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ (Connection ‚áí Connect):

Modbus Poll.
–£ –º–µ–Ω—è —ç—Ç–æ COM24, –∫–æ—Ç–æ—Ä—ã–π —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ STM32, –∫ USART1, —á—Ç–æ –ª–æ–≥–∏—á–Ω–æ. –î–∞–ª–µ–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π (Setup ‚áí Read/Write Definitions):

Modbus RTU settings.
–ó–∞–ø—É—Å–∫–∞–µ–º:

–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Modbus RTU Slave.
–ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –≤ –≤–∏–¥–µ —Ç–µ—Ö —Å–∞–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ.

–ù–∞ —ç—Ç–æ–º –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å Modbus RTU Slave, –≤–æ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:
